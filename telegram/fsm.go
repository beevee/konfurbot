package telegram

import (
	"fmt"
	"time"

	"github.com/beevee/konfurbot"
	"github.com/looplab/fsm"
	"github.com/tucnak/telebot"
)

const (
	greetCommand         = "greet"
	returnToStartCommand = "return"
	unknownCommand       = "unknown"

	foodCommand = "üå∂ –ï–¥–∞"

	talkCommand       = "üî• –î–æ–∫–ª–∞–¥—ã / –ú–ö"
	talkNowCommand    = "–ö–æ—Ç–æ—Ä—ã–µ –∏–¥—É—Ç —Å–µ–π—á–∞—Å"
	talkNextCommand   = "–ö–æ—Ç–æ—Ä—ã–µ –Ω–∞—á–Ω—É—Ç—Å—è —Å–∫–æ—Ä–æ"
	talkAllCommand    = "–í—Å–µ"
	talkLongCommand   = "–° —Ç–∏–∑–µ—Ä–∞–º–∏ (–ø—Ä–æ—Å—Ç—ã–Ω—è!)"
	talkShortCommand  = "–ë–µ–∑ —Ç–∏–∑–µ—Ä–æ–≤ (—É—Ä–∞! –∫—Ä–∞—Ç–∫–æ—Å—Ç—å!)"
	talkTalkCommand   = "–î–æ–∫–ª–∞–¥—ã"
	talkMasterCommand = "–ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã"

	funCommand = "üçæ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è"

	transferCommand = "üöú –¢—Ä–∞–Ω—Å—Ñ–µ—Ä"

	welcomeState = "welcome"
	startState   = "start"
	talkState    = "talk"
	talkNowState = "talknow"
	talkAllState = "talkall"
)

var stateMessageOptions = map[string]*telebot.SendOptions{
	startState: &telebot.SendOptions{
		ReplyMarkup: telebot.ReplyMarkup{
			CustomKeyboard: [][]string{
				[]string{foodCommand, talkCommand},
				[]string{funCommand, transferCommand},
			},
			ResizeKeyboard: true,
		},
	},

	talkState: &telebot.SendOptions{
		ReplyMarkup: telebot.ReplyMarkup{
			CustomKeyboard: [][]string{
				[]string{talkNowCommand, talkNextCommand, talkAllCommand},
			},
			ResizeKeyboard: true,
		},
	},

	talkNowState: &telebot.SendOptions{
		ReplyMarkup: telebot.ReplyMarkup{
			CustomKeyboard: [][]string{
				[]string{talkLongCommand, talkShortCommand},
			},
			ResizeKeyboard: true,
		},
	},

	talkAllState: &telebot.SendOptions{
		ReplyMarkup: telebot.ReplyMarkup{
			CustomKeyboard: [][]string{
				[]string{talkTalkCommand, talkMasterCommand},
			},
			ResizeKeyboard: true,
		},
	},
}

func initStateMachine() *fsm.FSM {
	return fsm.NewFSM(
		welcomeState,

		fsm.Events{
			{Name: greetCommand, Src: []string{welcomeState}, Dst: startState},
			{Name: foodCommand, Src: []string{startState}, Dst: startState},
			{Name: talkCommand, Src: []string{startState}, Dst: talkState},
			{Name: talkNowCommand, Src: []string{talkState}, Dst: talkNowState},
			{Name: talkLongCommand, Src: []string{talkNowState}, Dst: startState},
			{Name: talkShortCommand, Src: []string{talkNowState}, Dst: startState},
			{Name: talkAllCommand, Src: []string{talkState}, Dst: talkAllState},
			{Name: talkTalkCommand, Src: []string{talkAllState}, Dst: startState},
			{Name: talkMasterCommand, Src: []string{talkAllState}, Dst: startState},
			{Name: returnToStartCommand, Src: []string{startState}, Dst: startState},
			{Name: unknownCommand, Src: []string{startState}, Dst: startState},
		},

		fsm.Callbacks{
			greetCommand: wrapCallback(func(e *fsm.Event, chat telebot.Chat, bot *Bot) error {
				return bot.telebot.SendMessage(chat, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –ö–æ–Ω—Ñ–£–†!", stateMessageOptions[e.Dst])
			}),

			foodCommand: wrapCallback(func(e *fsm.Event, chat telebot.Chat, bot *Bot) error {
				events := bot.ScheduleStorage.GetEventsByType("food")
				return bot.telebot.SendMessage(chat, makeResponseFromEvents(events, false), stateMessageOptions[e.Dst])
			}),

			talkCommand: wrapCallback(func(e *fsm.Event, chat telebot.Chat, bot *Bot) error {
				return bot.telebot.SendMessage(chat, "–û–∫–µ–π, –∫–∞–∫–∏–µ –¥–æ–∫–ª–∞–¥—ã –∏ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã?", stateMessageOptions[e.Dst])
			}),

			talkNowCommand: wrapCallback(func(e *fsm.Event, chat telebot.Chat, bot *Bot) error {
				return bot.telebot.SendMessage(chat, "–ò—Ö –º–æ–∂–µ—Ç –æ–∫–∞–∑–∞—Ç—å—Å—è –¥–æ–≤–æ–ª—å–Ω–æ –º–Ω–æ–≥–æ. –¢–∏–∑–µ—Ä—ã –Ω–∞–¥–æ?", stateMessageOptions[e.Dst])
			}),

			talkLongCommand: wrapCallback(func(e *fsm.Event, chat telebot.Chat, bot *Bot) error {
				var events []konfurbot.Event
				switch e.Src {
				case talkNowState:
					events = bot.ScheduleStorage.GetCurrentEventsByType("talk", time.Now().In(bot.Timezone))
				}
				return bot.telebot.SendMessage(chat, makeResponseFromEvents(events, true), stateMessageOptions[e.Dst])
			}),

			talkShortCommand: wrapCallback(func(e *fsm.Event, chat telebot.Chat, bot *Bot) error {
				var events []konfurbot.Event
				switch e.Src {
				case talkNowState:
					events = bot.ScheduleStorage.GetCurrentEventsByType("talk", time.Now().In(bot.Timezone))
				}
				return bot.telebot.SendMessage(chat, makeResponseFromEvents(events, false), stateMessageOptions[e.Dst])
			}),

			talkTalkCommand: wrapCallback(func(e *fsm.Event, chat telebot.Chat, bot *Bot) error {
				events := bot.ScheduleStorage.GetEventsByTypeAndSubtype("talk", "talk")
				return bot.telebot.SendMessage(chat, makeResponseFromEvents(events, false), stateMessageOptions[e.Dst])
			}),

			talkMasterCommand: wrapCallback(func(e *fsm.Event, chat telebot.Chat, bot *Bot) error {
				events := bot.ScheduleStorage.GetEventsByTypeAndSubtype("talk", "master")
				return bot.telebot.SendMessage(chat, makeResponseFromEvents(events, false), stateMessageOptions[e.Dst])
			}),

			talkAllCommand: wrapCallback(func(e *fsm.Event, chat telebot.Chat, bot *Bot) error {
				return bot.telebot.SendMessage(chat, "–ü–æ–ª–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–æ–≤–æ–ª—å–Ω–æ –¥–ª–∏–Ω–Ω–æ–µ. –î–∞–≤–∞–π –ø–æ—Å–º–æ—Ç—Ä–∏–º –æ—Ç–¥–µ–ª—å–Ω–æ, –¥–æ–∫–ª–∞–¥—ã –∏–ª–∏ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã? –° —Ç–∏–∑–µ—Ä–∞–º–∏ –≤–æ–æ–±—â–µ –Ω–µ –±—É–¥—É –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å :)", stateMessageOptions[e.Dst])
			}),

			unknownCommand: wrapCallback(func(e *fsm.Event, chat telebot.Chat, bot *Bot) error {
				return bot.telebot.SendMessage(chat, "–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑ —Å –Ω–∞—á–∞–ª–∞.", stateMessageOptions[e.Dst])
			}),
		},
	)
}

func wrapCallback(f func(*fsm.Event, telebot.Chat, *Bot) error) func(*fsm.Event) {
	return func(e *fsm.Event) {
		if len(e.Args) < 2 {
			return
		}
		chat := e.Args[0].(telebot.Chat)
		bot := e.Args[1].(*Bot)
		if err := f(e, chat, bot); err != nil {
			bot.Logger.Log("msg", "error sending message", "chatid", chat.ID, "error", err)
		}
	}
}

func makeResponseFromEvents(events []konfurbot.Event, long bool) string {
	var response string
	for _, event := range events {
		response += fmt.Sprintf("%s ‚Äî %s: %s\n",
			event.Start.Format("15:04"), event.Finish.Format("15:04"), event.Short)
		if long {
			response += fmt.Sprintf("%s\n\n", event.Long)
		}
	}
	if response == "" {
		response = "–ù–∏—á–µ–≥–æ –Ω–µ—Ç :("
	}
	return response
}
